import os
import logging
from datetime import datetime
from pathlib import Path

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    InputFile
)
from telegram.ext import (
    Application,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler,
    ConversationHandler
)

from dotenv import load_dotenv
import openpyxl
from openpyxl import Workbook

# === –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ ===
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise ValueError("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

# === –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º ===
BASE_DIR = Path("C:/Users/–õ–µ–Ω–æ–≤–æ/PycharmProjects/PythonProject").resolve()
PRESENTATION_PATH = BASE_DIR / "–î–æ–±—Ä–æ+–ø–æ–∂–∞–ª–æ–≤–∞—Ç—å+–≤+–°–±–µ—Ä_–∫–æ—Ä–æ—Ç–∫–∞—è_compressed.pdf"
PHOTO_P2P_PATH = BASE_DIR / "P2P.png"
PHOTO_CULTURE_PATH = BASE_DIR / "–º–µ—Ä–æ.png"
EXCEL_PATH = BASE_DIR / "users.xlsx"

# === –°–æ—Å—Ç–æ—è–Ω–∏—è ===
(
    ASK_NAME,
    ASK_TAB_NUMBER,
    ASK_FIRST_DAY,
    MAIN_MENU,
    FEEDBACK_LIKED,
    FEEDBACK_MISSING,
    FEEDBACK_SUGGEST
) = range(7)

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Excel ===
def init_excel():
    if not EXCEL_PATH.exists():
        wb = Workbook()
        ws = wb.active
        ws.append([
            "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è",
            "TG Username",
            "–ò–º—è (–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)",
            "–¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä",
            "–î–∞—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è",
            "User ID",
            "–ß—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å",
            "–ß–µ–≥–æ –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ",
            "–ß—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å"
        ])
        wb.save(EXCEL_PATH)

def save_initial_data(user_id, username, name, tab_number, first_day):
    wb = openpyxl.load_workbook(EXCEL_PATH)
    ws = wb.active
    ws.append([
        datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        username or "N/A",
        name,
        tab_number,
        first_day,
        user_id,
        "", "", ""
    ])
    wb.save(EXCEL_PATH)

def update_feedback_in_excel(user_id, liked, missing, suggest):
    wb = openpyxl.load_workbook(EXCEL_PATH)
    ws = wb.active
    for row in ws.iter_rows(min_row=2, values_only=False):
        if row[5].value == user_id:
            row[6].value = liked
            row[7].value = missing
            row[8].value = suggest
            break
    wb.save(EXCEL_PATH)

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
def get_main_menu():
    return ReplyKeyboardMarkup(
        [
            ["1. –°–±–µ—Ä –Ω–∞ –£—Ä–∞–ª–µ", "2. –í–∏–¥–µ–æ-–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"],
            ["3. Peer-to-peer", "4. –ö—É–ª—å—Ç—É—Ä–∞ –∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞"],
            ["5. –ö–æ–Ω—Ç–∞–∫—Ç—ã", "6. –û—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å"]
        ],
        resize_keyboard=True
    )

def get_back_and_ask():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")],
        [InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_question")]
    ])

# === –î–∏–∞–ª–æ–≥ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("–î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –∏–º—è", reply_markup=ReplyKeyboardRemove())
    return ASK_NAME

async def ask_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text.strip()
    if not name:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ—ë –∏–º—è.")
        return ASK_NAME
    context.user_data["name"] = name
    await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä, —á—Ç–æ–±—ã —è –º–æ–≥ –Ω–∞–π—Ç–∏ —Ç–µ–±—è –≤ —Å–∏—Å—Ç–µ–º–µ")
    return ASK_TAB_NUMBER

async def ask_tab_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tab = update.message.text.strip()
    if not tab.isdigit():
        await update.message.reply_text("–¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞:")
        return ASK_TAB_NUMBER
    context.user_data["tab_number"] = tab
    await update.message.reply_text(
        "–ù–∞–ø–∏—à–∏ –¥–∞—Ç—É —Å–≤–æ–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –≤–∞–∂–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
    )
    return ASK_FIRST_DAY

async def ask_first_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    date_str = update.message.text.strip()
    try:
        datetime.strptime(date_str, "%d.%m.%Y")
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –£–∫–∞–∂–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return ASK_FIRST_DAY

    context.user_data["first_day"] = date_str
    user = update.effective_user
    save_initial_data(
        user_id=user.id,
        username=user.username,
        name=context.user_data["name"],
        tab_number=context.user_data["tab_number"],
        first_day=date_str
    )

    await update.message.reply_text(
        "–†–∞–¥ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É! –í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é –∏ –∏–∑—É—á–∞–π –º–∞—Ç–µ—Ä–∏–∞–ª—ã:",
        reply_markup=get_main_menu()
    )
    return MAIN_MENU

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é ===
async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "1. –°–±–µ—Ä –Ω–∞ –£—Ä–∞–ª–µ":
        await update.message.reply_text(
            "–°–∞–º—É—é –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ –°–±–µ—Ä –∏ –£—Ä–∞–ª —è —Å–æ–±—Ä–∞–ª –¥–ª—è —Ç–µ–±—è –≤ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ - –∏–∑—É—á–∞–π, –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã, –µ—Å–ª–∏ –µ—Å—Ç—å"
        )
        if PRESENTATION_PATH.exists():
            try:
                with open(PRESENTATION_PATH, 'rb') as f:
                    await update.message.reply_document(
                        document=InputFile(f, filename="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°–±–µ—Ä.pdf"),
                        reply_markup=get_back_and_ask()
                    )
            except Exception as e:
                await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}", reply_markup=get_back_and_ask())
        else:
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=get_back_and_ask())

    elif text == "2. –í–∏–¥–µ–æ-–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ":
        await update.message.reply_text(
            "–¢—ã —Å—Ç–∞–ª —á–∞—Å—Ç—å—é –±–æ–ª—å—à–æ–π –∫–æ–º–∞–Ω–¥—ã –°–±–µ—Ä–∞ –∏ —Ç–µ–±—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é—Ç –Ω–∞—à–∏ —Ç–æ–ø-–º–µ–Ω–µ–¥–∂–µ—Ä—ã. –°–º–æ—Ç—Ä–∏ –≤–∏–¥–µ–æ.\n\n"
            "https://disk.yandex.ru/d/eAWTc08UnOBPwQ",
            reply_markup=get_back_and_ask()
        )

    elif text == "3. Peer-to-peer":
        msg = (
            "–ù–∞ –≤—Å–µ–º –ø–µ—Ä–∏–æ–¥–µ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ —Ç–≤–æ—è –æ—Å–Ω–æ–≤–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ - —ç—Ç–æ HR-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –ü—É–ª—å—Å –∏ —Ç–≤–æ–π –±–∞–¥–¥–∏.\n"
            "–ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –∑–∞–¥–∞—á–∏, –ø—Ä–æ—Ö–æ–¥–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏.\n\n"
            "–ë–∞–¥–¥–∏ - —ç—Ç–æ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–π —Ä–æ–ª–µ–π –≤–∑–∞–∏–º–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è (peer-to-peer).\n"
            "–ö—É–ª—å—Ç—É—Ä–∞ –≤–∑–∞–∏–º–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è - —ç—Ç–æ —Ç–∞–∫–∂–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—ã –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é, –∫–æ—É—á–∏, –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∏, —Ñ–∞—Å–∏–ª–∏—Ç–∞—Ç–æ—Ä—ã, –º–µ–¥–∏–∞—Ç–æ—Ä—ã. "
            "–ü–æ–¥—Ä–æ–±–Ω–µ–µ —Ç—ã —Å–º–æ–∂–µ—à—å –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –≤ –ü—É–ª—å—Å (—Ä–∞–∑–¥–µ–ª –†–∞–∑–≤–∏—Ç–∏–µ)."
        )
        await update.message.reply_text(msg)
        if PHOTO_P2P_PATH.exists():
            with open(PHOTO_P2P_PATH, 'rb') as f:
                await update.message.reply_photo(photo=InputFile(f), reply_markup=get_back_and_ask())
        else:
            await update.message.reply_text("üñºÔ∏è –°—Ö–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", reply_markup=get_back_and_ask())

    elif text == "4. –ö—É–ª—å—Ç—É—Ä–∞ –∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞":
        await update.message.reply_text(
            "–£—Ä–∞–ª—å—Å–∫–∏–π –±–∞–Ω–∫ –∂–∏–≤–µ—Ç –Ω–∞—Å—ã—â–µ–Ω–Ω–æ–π –∫—É–ª—å—Ç—É—Ä–Ω–æ–π –∏ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π –∂–∏–∑–Ω—å—é. "
            "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º - –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–∏—Ö–æ–¥–∏—Ç —Ç–µ–±–µ –Ω–∞ –ø–æ—á—Ç—É. "
            "–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ —Å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π:"
        )
        if PHOTO_CULTURE_PATH.exists():
            with open(PHOTO_CULTURE_PATH, 'rb') as f:
                await update.message.reply_photo(photo=InputFile(f))
        else:
            await update.message.reply_text("‚ö†Ô∏è –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

        await update.message.reply_text(
            "–í—Å—Ç—É–ø–∞–π –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –£—Ä–∞–ª—å—Å–∫–æ–≥–æ –±–∞–Ω–∫–∞ ‚Äî –±—É–¥—å –≤ –∫—É—Ä—Å–µ —Å–æ–±—ã—Ç–∏–π!\n\n"
            "üó£Ô∏è **–¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª ¬´–ì–æ–≤–æ—Ä–∏—Ç –£—Ä–∞–ª¬ª** ‚Äî –Ω–æ–≤–æ—Å—Ç–∏, –∞–Ω–æ–Ω—Å—ã –∏ –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è\n"
            "ü§ù **–¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª ¬´–ë–∏—Ä–∂–∞ –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥ (–£–ë)¬ª** ‚Äî –≤–æ–ª–æ–Ω—Ç—ë—Ä—Å–∫–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ\n\n"
            "–°—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã —É–∫–∞–∑–∞–Ω—ã –≤ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —É–∂–µ –∏–∑—É—á–∏–ª.\n"
            "–ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏ –≤ —Ä–∞–∑–¥–µ–ª **¬´–ö–æ–Ω—Ç–∞–∫—Ç—ã¬ª**!",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
            ])
        )

    elif text == "5. –ö–æ–Ω—Ç–∞–∫—Ç—ã":
        await update.message.reply_text(
            "–õ—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞–ø—Ä–∞–≤–ª—è–π –Ω–∞ –ø–æ—á—Ç—É –∫—É—Ä–∞—Ç–æ—Ä–∞ –ø–æ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –≤ –£—Ä–∞–ª—å—Å–∫–æ–º –±–∞–Ω–∫–µ "
            "–ö–æ—Ç–µ–ª—å–Ω–∏–∫–æ–≤–æ–π –ö—Ä–∏—Å—Ç–∏–Ω–µ Kotelnikova.K.A@sberbank.ru",
            reply_markup=get_back_and_ask()
        )

    elif text == "6. –û—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å":
        await update.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ö–æ—á–µ—à—å –ø–æ–º–æ—á—å –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ! –û—Ç–≤–µ—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ —Ç—Ä–∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–∞.",
            reply_markup=ReplyKeyboardRemove()
        )
        await update.message.reply_text("1. –û–ø–∏—à–∏, —á—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –±–æ—Ç–∞:")
        return FEEDBACK_LIKED

    return MAIN_MENU

# === –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å ===
async def feedback_liked(update: Update, context: ContextTypes.DEFAULT_TYPE):
    liked = update.message.text.strip()
    context.user_data["feedback_liked"] = liked
    await update.message.reply_text("2. –ù–∞–ø–∏—à–∏, —á–µ–≥–æ —Ç–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –±–æ—Ç–∞:")
    return FEEDBACK_MISSING

async def feedback_missing(update: Update, context: ContextTypes.DEFAULT_TYPE):
    missing = update.message.text.strip()
    context.user_data["feedback_missing"] = missing
    await update.message.reply_text("3. –ß—Ç–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ —á–∞—Ç-–±–æ—Ç, —á—Ç–æ–±—ã –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±—ã–ª–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω—ã–º –¥–ª—è –Ω–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤?")
    return FEEDBACK_SUGGEST

async def feedback_suggest(update: Update, context: ContextTypes.DEFAULT_TYPE):
    suggest = update.message.text.strip()
    user = update.effective_user
    update_feedback_in_excel(user.id, context.user_data.get("feedback_liked", ""), context.user_data.get("feedback_missing", ""), suggest)
    await update.message.reply_text(
        "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —Ç–≤–æ—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! üôå –≠—Ç–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –Ω–∞—à–µ–≥–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞! üí°‚ú®\n"
        "–°—Ä–µ–¥–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–ø—Ä–æ—Å–∞ –ø–µ—Ä–≤–æ–≥–æ —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞ –º—ã –±—É–¥–µ–º —Ä–∞–∑—ã–≥—Ä—ã–≤–∞—Ç—å –ø–∞–º—è—Ç–Ω—ã–π –º–µ—Ä—á üéÅüëï ‚Äî —Å–ª–µ–¥–∏ –∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏! üîîüòä",
        reply_markup=get_main_menu()
    )
    return MAIN_MENU

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ===
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "back_to_menu":
        await query.message.reply_text("–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é:", reply_markup=get_main_menu())
    elif query.data == "ask_question":
        await query.message.reply_text(
            "–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å ‚Äî –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–º!",
            reply_markup=ReplyKeyboardMarkup([["‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"]], resize_keyboard=True)
        )

async def handle_return(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é:", reply_markup=get_main_menu())
        return MAIN_MENU
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å!", reply_markup=get_main_menu())
    return MAIN_MENU

# === –ó–∞–ø—É—Å–∫ ===
def main():
    print(f"üìÅ –ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞: {BASE_DIR}")
    print(f"üìÑ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è: {'‚úÖ' if PRESENTATION_PATH.exists() else '‚ùå'}")
    print(f"üñºÔ∏è P2P.png: {'‚úÖ' if PHOTO_P2P_PATH.exists() else '‚ùå'}")
    print(f"üñºÔ∏è –ºero.png: {'‚úÖ' if PHOTO_CULTURE_PATH.exists() else '‚ùå'}")
    init_excel()
    logging.basicConfig(level=logging.INFO)
    app = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_name)],
            ASK_TAB_NUMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_tab_number)],
            ASK_FIRST_DAY: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_first_day)],
            MAIN_MENU: [
                MessageHandler(filters.Regex("^‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é$"), handle_return),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu)
            ],
            FEEDBACK_LIKED: [MessageHandler(filters.TEXT & ~filters.COMMAND, feedback_liked)],
            FEEDBACK_MISSING: [MessageHandler(filters.TEXT & ~filters.COMMAND, feedback_missing)],
            FEEDBACK_SUGGEST: [MessageHandler(filters.TEXT & ~filters.COMMAND, feedback_suggest)],
        },
        fallbacks=[CommandHandler("start", start)],
        allow_reentry=True
    )

    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(button_handler))

    app.run_polling()

if __name__ == "__main__":
    main()